
;;; Davis Foote
;;; djfoote@berkeley.edu
;;;
;;; lsystem.scm
;;;
;;; A module for Scheme as implemented in the UCB CS 61A Scheme interpreter
;;; project.
;;;
;;; Defines Lindenmayer systems and evaluates a system's state.
;;;
;;; Read about L-systems at http://en.wikipedia.org/wiki/Lindenmayer_system

;;; Creates an L-system with the given parameters.
;;; An L-system is represented as a function that takes in an integer n and
;;;	returns the state of the system after n iterations as a list of symbols.
;;;
;;; start - The system's initial state as a list of symbols.
;;; rules - A list of lists of symbols. Each list's first symbol should
;;;   be the symbol to be replaced, and the remainder of the list should
;;;   be the symbols it should be replaced with.
;;;
;;; return - The L-system function.
(define (lsys start rules)
  ;;; The returned function that represents the L-system.
  ;;; n - The number of iterations of the L-system's ruleset to be applied.
  ;;; return - State of the system after n iterations as a list of symbols.
  (lambda (n) (n-iters start rules n)))

;;; Calculates the state of the system after n iterations. Exists as a separate
;;; function because an L-system can operate as a function with one parameter,
;;; however more are needed for the recursive calls.
;;;
;;; current - The system's current state as a list of symbols.
;;; rules - A list of lists of symbols. Each list's first symbol should
;;;   be the symbol to be replaced, and the remainder of the list should
;;;   be the symbols it should be replaced with.
;;; n - The number of iterations of the L-system's ruleset to be applied.
;;;
;;; return - The state of the system after n iterations as a list of symbols.
(define (n-iters current rules n)
  (if (= n 0)
      current
      (n-iters (itersys '() current rules) rules (- n 1))))

;;; Calculates the next iteration of the L-system with given parameters as a
;;; list of symbols.
;;;
;;; prepend - A list of symbols to be prepended the the system's state.
;;; Necessary for itersys to be tail-recursive. Should be nil for initial
;;; call to itersys.
;;; current - The system's current state as a list of symbols.
;;; rules - A list of lists of symbols. Each list's first symbol should
;;;   be the symbol to be replaced, and the remainder of the list should
;;;   be the symbols it should be replaced with.
;;;
;;; return - The state of the system after 1 iteration as a list of symbols.
(define itersys
  (lambda (prepend current rules)
  (if (not (null? current))
      (begin
        (define replacement (rules-modify (car current) rules))))
  (cond ((null? current) prepend)
        ((null? rules) (append prepend current))
        ((list? replacement)
         (itersys (append prepend replacement) (cdr current) rules))
        (else
         (if (null? prepend)
             (define prepend (list (car current)))
             (define prepend (append prepend (list (car current)))))
         (itersys prepend (cdr current) rules)))))

;;; Determines whether there is a rule that replaces a given symbol
;;; and if there is, returns what it should be replaced with.
;;;
;;; symbol - The symbol being searched for.
;;; rules - The list of rules (as described above) being searched through for a
;;; rule that replaces symbol.
;;;
;;; return - The list of symbols that symbol should be replaced with if a rule
;;; that replaces it is found. #f otherwise.
(define (rules-modify symbol rules)
  (cond ((null? rules) #f)
        ((eq? symbol (car (car rules))) (cdr (car rules)))
        (else (rules-modify symbol (cdr rules)))))

;; (bind-func rules-modify
;;   (lambda (symbol:Symbol rules)
;;   (cond ((null? rules) #f)
;;         ((equal symbol (car (car rules))) (cdr (car rules)))
;;         (else (rules-modify symbol (cdr rules))))))

(define algae
  (lsys (list 'a)
        (list (list 'a 'a 'p)
              (list 'p 'a))))
(algae 4)

(define sierpinski
  (lsys (list 'a)
        (list (list 'a 'b 'r 'a 'r 'b)
              (list 'b 'a 'l 'b 'l 'a))))
(sierpinski 4)

(define cool1
  (lsys (list 'a 'r 'a 'r 'a)
        (list (list 'a 'a 'a 'a 'r 'a 'a 'a 'a 'a))))
(cool1 2)

(define twig
  (lsys (list 'x)
        (list (list 'x 'a 'l 'o 'o 'x 'd 'r 'x 'd 'r 'a 'o 'r 'a 'x 'd 'l 'x)
              (list 'a 'a 'a))))
(twig 2)

(define seaweed
  (lsys (list 'b)
        (list (list 'b 'b 'b 'l 'o 'l 'b 'r 'b 'r 'b 'd 'r 'o 'r 'b 'l 'b 'l 'b 'd))))
(seaweed 2)

(define evan
  (lsys (list 'p)
        (list (list 'p 'b 'r 'r 'p 'l 'l 'o 'a 'r 'p 'l 'd)
              (list 'b 'b 'b))))
(evan 4)

(define dragon
  (lsys (list 'f 'x)
        (list (list 'x 'x 'p 'y 'f)
              (list 'y 'f 'x 'q 'y))))
(dragon 0)

(define hilbert
  (lsys (list 'x)
        (list (list 'x 'p 'y 'u 'q 'x 'u 'x 'q 'u 'y 'p)
              (list 'y 'q 'x 'u 'p 'y 'u 'y 'p 'u 'x 'q))))
(hilbert 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define nth (lambda (at lst) (list-ref lst at)))

(define nth_warp
  (lambda (n lst)
    (car (rotate lst (* n -1)))))

(define (nths ns lst)
  (if (or (null? ns) (null? lst))
      '()
      (cons (nth_warp (car ns) lst)
            (nths (cdr ns) lst))))

(nth 3 '(1 2 3 5))
(nth_warp 5 '(13 4 5 6))
(nths '(-1 2 5) '(a a 1 v 12 b 8))

(list-ref '(1 23 2) 1)

(define (uniquely lst)
  (let looking ((rslt '()) (lst lst))
    (if (null? lst)
        rslt
        (let ((next (car lst))
              (rest (cdr lst)))
          (if (list? next)
              (looking rslt (append next rest))
              (looking (if (memq next rslt)
                           rslt
                           (cons next rslt))
                       rest))))))
(uniquely (dragon 0))

(define subst
  (lambda (new old l)
    (cond
     ((null? l) (quote ()))
     ((atom? (car l))
      (cond
       ((eq? (car l) old) (cons new
                                (subst new old (cdr l))))
       (else (cons (car l)
                   (subst new old (cdr l))))))
     (else (cons (subst new old (car l))
                 (subst new old (cdr l)))))))

(define (subst_lst newl oldl l)
  (if (null? oldl)
      l
      (subst_lst (rotate newl 1)
                 (cdr oldl)
                 (subst (car newl) (car oldl) l))
      ))

(subst '1 'u (hilbert 1))

(subst_lst '(1/1 1/2 1/3 1/4) (uniquely (hilbert 2)) (hilbert 2))

(define (test ls-name n sub)
  (subst_lst
   sub
   (uniquely (apply (eval 'ls-name) (list n)))
   (apply (eval 'ls-name) (list n)) (list n)))

(define (lsys-sub ls-name n sub)
  (subst_lst
   sub
   (uniquely (apply (eval 'ls-name) (list n)))
   (apply (eval 'ls-name) (list n)) (list n)))

(lsys-sub hilbert 2 '(1 2 3 4))
