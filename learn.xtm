(play-note (now) synth (random 60 80) 80 (* 1.0 *second*))

;; ---------------------------------------------------------------
;; plays a sequence of pitches
(define play-seq
  (lambda (time plst rlst)
    (play-note time synth (car plst) 80 (car rlst))
    (callback (+ time (* .5 (car rlst))) 'play-seq (+ time (car rlst))
              (rotate plst -3)
              (rotate rlst -1))))

(play-seq (now) '(60 62 65 69 67) '(11025 11025 22050 11025))
(play-seq (now) (map (lambda (n) (+ 12 n)) '(60 62 65 69 67)) '(11025 11025 22050 11025))
(play-seq (now) (map (lambda (n) (+ 24 n)) '(60 62 65 69 67)) '(11025 11025 22050 11025))
(play-seq (now) (map (lambda (n) (- 12 n)) '(60 62 65 69 67)) '(11025 11025 22050 11025))
(play-seq (now) (map (lambda (n) (+ 60 n)) '(60 62 65 69 67)) '(11025 11025 22050 11025))

;; ---------------------------------------------------------------

(define chord
  (lambda()
    (let ((time (now)))
    (play-note time synth 60 80 *second*)
    (play-note time synth 64 80 *second*)
    (play-note (+ time (* *second* 0.5)) synth 67 80 *second*))))

(chord)

;; ---------------------------------------------------------------

(define melody (map (lambda (c)
                      (- (char->integer c) 24))
                    (string->list "Hello World!")))

(define loop
  (lambda (time pitch-list)
    (cond ((null? pitch-list) (println 'done))
          (else (play-note time synth (car pitch-list) 80 100000)
                (loop (+ time (* *second* 0.5))
                      (cdr pitch-list))))))

(loop (now) melody)

;; ---------------------------------------------------------------

(dotimes (i 8)
  (play-note (+ (now) (* i 5000)) synth (+ 60 i) 80 4000))

(let loop ((i 0))
  (play-note (+ (now) (* i 2500)) synth (+ 60 i) 80 4000)
  (if (< i 9) (loop (+ i 2))))

(let loop ((scale '(0 2 4 5 7 9 11 12))
           (time 0))
  (play-note (+ (now) time) synth (+ 60 (car scale)) 80 4000)
  (if (not (null? (cdr scale)))
      (loop (cdr scale) (+ time 4000))))

(let loop ((scale '(0 2 4 5 7 9 11 12))
           (dur '(22050 11025 11025 22050 11025 11025 44100 44100))
           (time 0))
  (play-note (+ (now) time) synth (+ 60 (car scale)) 80 (car dur))
  (if (not (null? (cdr scale)))
      (loop (cdr scale) (cdr dur) (+ time (car dur)))))

;; ---------------------------------------------------------------

(let loop ((chord '(0 4 7)))
  (play-note (now) synth (+ 60 (car chord)) 80 44100)
  (if (not (null? (cdr chord)))
      (loop (cdr chord))))

(let loop ((scale '(0 4 7)))
  (cond ((null? scale) 'finished)
        (else (play-note (now) synth (+ 60 (car scale)) 80 44100)
              (loop (cdr scale)))))

(map (lambda (p)
       (play-note (now) synth p 90 44100))
     (list 60 63 67))

(map (lambda (p d)
       (play-note (+ (now) d) synth p 80 (- 88200 d)))
     (list 60 64 67)
     (list 0 22050 44100))

(map (lambda (p d v)
       (play-note (+ (now) d) synth p v (- 88200 d)))
     (list 60 64 67)
     (list 0 22050 44100)
     (list 90 50 20))

(define loop
  (lambda (time)
    (play-note time synth 60 80 1.0)
    (callback (+ time 40000) 'loop (+ time 44100))))

(loop (now))

;; ---------------------------------------------------------------


;; define a melody
(define melody (make-list-with-proc 24
                                    (lambda (i)
                                      (pc:random 60 73 '(0 2 4 5 7 9 11)))))
;; define a random walk melody seeded with 60
;; (we remove this at the end with cdr)
(define melody
  (let loop ((i 0)
             (lst '(60)))
    (if (< i 24)
        (loop (+ i 1)
              (cons (pc:relative (car lst)
                                 (random '(-1 1))
                                 '(0 2 4 5 7 9 11))
                    lst))
        (cdr (reverse lst)))))

;; define harmony up a perfect 5th (4 places away in the pitch class set)
(define harmony (map (lambda (p)
                       (pc:relative p 4 '(0 2 4 5 7 9 11)))
                     melody))

;; set c at start and end
(set! melody (cons 60 melody))
(set! harmony (cons 60 harmony))
(set! melody (reverse (cons 60 (reverse melody))))
(set! harmony (reverse (cons 60 (reverse harmony))))

;; random rhythm
(define rhythm (make-list-with-proc 24 (lambda (i) (random '(44100 22050)))))

;; set long start and end to rhythm
(set! rhythm (cons 88200 rhythm))
(set! rhythm (reverse (cons 88200 (reverse rhythm))))

(define organum
  (lambda (time mlst hlst rlst)
    (play-note time synth (car mlst) 60 (car rlst))
    (play-note time synth (car hlst) 60 (car rlst))
    (if (not (null? (cdr mlst)))
        (callback (+ time (* .5 (car rlst))) 'organum (+ time (car rlst))
                  (cdr mlst)
                  (cdr hlst)
                  (cdr rlst)))))

;; start
(organum (now) melody harmony rhythm)


;; ---------------------------------------------------------------

(define crazy-chord
  (lambda (time)
    (play-note time synth (pc:random 24 97 '(0 1 4 10 11 7 8 2)) 80 500)
    (callback (+ time 200) 'crazy-chord (+ time 400))))

(crazy-chord (now))



;; C-major and repeat
(define chords
  (lambda (time)
    (for-each (lambda (p)
                (play-note time synth p 80 10000))
              (pc:make-chord 60 72 4 '(0 4 7)))
    (callback (+ time 10000) 'chords (+ time 11025))))

(chords (now))

;; I IV V
(define chords
  (lambda (time chord)
    (for-each (lambda (p)
                (play-note time synth p 80 10000))
              (pc:make-chord 60 72 4 chord))
    (callback (+ time 10000) 'chords (+ time 11025)
              (if (> (random) .8)
              (random '((0 4 7) (5 9 0) (7 11 12)))
              chord))))

(chords (now) '(0 4 7))

;; markov chord progression I IV V
(define progression
  (lambda (time chord)
    (for-each (lambda (p)
                (play-note time synth p 80 40000))
              (pc:make-chord 60 73 3 chord))
    (callback (+ time 40000) 'progression (+ time 44100)
              (random (cdr (assoc chord '(((0 4 7) (5 9 0) (7 11 2))
                                          ((5 9 0) (7 11 2) (0 4 7))
                                          ((7 11 2) (0 4 7)))))))))

(progression (now) '(0 4 7))

;; markov chord progression I ii iii IV V vi vii
(define progression
  (lambda (time degree)
    (for-each (lambda (p)
                (play-note time synth p 80 40000))
              (pc:make-chord 48 77 5 (pc:diatonic 0 '^ degree)))
    (callback (+ time 40000) 'progression (+ time 44100)
              (random (cdr (assoc degree '((i iv v iii vi)
                                           (ii v vii)
                                           (iii vi)
                                           (iv v ii vii i)
                                           (v i vi)
                                           (vii v i)
                                           (vi ii))))))))

(progression (now) 'i)

;; mordant
(define play-note-mord
  (lambda (time inst pitch vol duration pc)
    (play-note (- time 5000) inst pitch (- vol 10) 2500)
    (play-note (- time 2500) inst (pc:relative pitch 1 pc) (- vol 10) 2500)
    (play-note time inst pitch vol (- duration 5000))))

;; markov chord progression I ii iii IV V vi vii
(define progression
  (lambda (time degree)
    (let ((dur (if (member degree '(i iv)) 88200 44100)))
      (for-each (lambda (p)
                  (if (and (> p 70) (> (random) .7))
                      (play-note-mord time synth p
                                      (random 70 80)
                                      (* .9 dur) '(0 2 4 5 7 9 11))
                      (play-note time organ p (random 70 80) (* .9 dur))))
                (pc:make-chord 40 78 4 (pc:diatonic 0 '^ degree)))
      (callback (+ time (* .9 dur)) 'progression (+ time dur)
                (random (cdr (assoc degree '((i iv v iii vi)
                                             (ii v vii)
                                             (iii vi)
                                             (iv v ii vii i)
                                             (v i vi)
                                             (vii v i)
                                             (vi ii)))))))))

(progression (now) 'i)

;; Quintet
(define progression
  (lambda (time degree)
    (let ((dur (if (member degree '(i iv)) (random (list 88200 (* 2 88200))) 44100)))
      (for-each (lambda (p)
                  (cond ((and (> (random) .7) (< dur 80000))
                         (play-note time organ p (random 60 70) (* .3 dur))
                         (play-note (+ time (* .5 dur))
                                    organ
                                    (pc:relative p (random '(-1 1))
                                                 '(0 2 4 5 7 9 11))
                                    (random 60 80)
                                    (* .3 dur)))
                        (else (play-note time
                                         organ
                                         p
                                         (random 60 70)
                                         (* .7 dur)))))
                (pc:make-chord 36 90 5 (pc:diatonic 0 '^ degree)))
      (callback (+ time (* .8 dur)) 'progression (+ time dur)
                (random (cdr (assoc degree '((i iv v iii vi)
                                             (ii v vii)
                                             (iii vi)
                                             (iv v ii vii i)
                                             (v i vi)
                                             (vii v i)
                                             (vi ii)))))))))

(progression (now) 'i)

;; ---------------------------------------------------------------

(define drum-loop
  (lambda (time dur)
    (play-note time drums *gm-cowbell* 80 dur)
    (callback (+ time (* .5 dur)) 'drum-loop (+ time dur) (random '(22050 11025)))))

(drum-loop (now) 11025)

;; beat loop
(define drum-loop
  (lambda (time dur)
    (let ((d (* dur *samplerate*)))
      (play-note time drums *gm-cowbell* 80 d)
      (callback (+ time (* .5 d)) 'drum-loop (+ time d)
                (random (list (/ 1 3) 0.5 0.25))))))

(drum-loop (now) 0.25)

(define drum-loop
  (lambda (time dur)
    (let ((d (* dur (+ 0.5 (* 0.25 (cos (* 16 3.141592 time)))) *samplerate*)))
      (play-note time drums *gm-cowbell* 80 d)
      (callback (+ time (* .5 d)) 'drum-loop (+ time d)
                (random (list 0.5))))))

(drum-loop (now) 0.25)

(define *metro* (make-metro 120))

(define drum-loop
  (lambda (time duration)
    (*metro* 'set-tempo (+ 120 (* 40 (cos (* .25 3.141592 time)))))
    (play-note (*metro* time) drums *gm-cowbell* 80 (*metro* 'dur duration))
    (callback (*metro* (+ time (* .5 duration))) 'drum-loop (+ time duration)
              (random (list 0.5)))))

(drum-loop (*metro* 'get-beat) 0.5)

;; ---------------------------------------------------------------
;; create a metronome starting at 120 bpm
(define *metro* (make-metro 120))

;; beat loop with tempo shift
(define drum-loop
  (lambda (time duration pitch)
    (play-note (*metro* time) drums pitch 80 (*metro* 'dur duration))
    (callback (*metro* (+ time (* .5 duration))) 'drum-loop (+ time duration)
              duration
              pitch)))

;; shift tempo over time using oscillator
(define tempo-shift
  (lambda (time)
    (*metro* 'set-tempo (+ 120 (* 40 (cos (* .25 3.141592 time)))))
    (callback (*metro* (+ time .2)) 'tempo-shift (+ time .25))))

(drum-loop (*metro* 'get-beat 4) 0.5 *gm-cowbell*)
(drum-loop (*metro* 'get-beat 4.25) 0.5 *gm-open-triangle*)
(tempo-shift (*metro* 'get-beat 1.0))


;; ---------------------------------------------------------------

(define *metro* (make-metro 90))

;; a 2/8 3/8 2/8 cycle
(define *metre* (make-metre '(2 3 2) 0.5))

;; play first beat of each 'bar'
(define metre-test
  (lambda (time)
    (if (*metre* time 1.0)
        (play-note (*metro* time) drums *gm-side-stick* 80 10000))
    (callback (*metro* (+ time 0.4)) 'metre-test (+ time 0.5))))

(metre-test (*metro* 'get-beat 1.0))

;; classic 2 against 3
(define *metro* (make-metro 180))

;; 3/8
(define *metre1* (make-metre '(3) .5))
;; 2/8
(define *metre2* (make-metre '(2) .5))


;; play first beat of each 'bar'
(define metre-test
  (lambda (time)



    (if (*metre1* time 1.0)
        (play-note (*metro* time) drums *gm-side-stick* 80 10000))
    (if (*metre2* time 1.0)
        (play-note (*metro* time) drums *gm-snare* 60 10000))
    (callback (*metro* (+ time 0.4)) 'metre-test (+ time 0.5))))

(metre-test (*metro* 'get-beat 1.0))


;; ---------------------------------------------------------------

(define *metro* (make-metro 140))

(define *metre1* (make-metre '(2 3 2 3 2) 0.5))
(define *metre2* (make-metre '(3 5 7 5 3) 0.5))

(define metre-test
  (lambda (time)
    (play-note (*metro* time) drums
               (random (cons .8 *gm-closed-hi-hat*) (cons .2 *gm-open-hi-hat*))
               (+ 40 (* 20 (cos (* 2 3.141592 time))))
               (random (cons .8 500) (cons .2 2000)))
    (if (*metre1* time 1.0)
        (begin (play-note (*metro* time) drums *gm-snare* 20 100000)
               (play-note (*metro* time) drums *gm-pedal-hi-hat* 70 100000)))
    (if (*metre2* time 1.0)
        (begin (play-note (*metro* time) drums *gm-kick* 70 100000)
               (play-note (*metro* time) drums *gm-ride-bell* 0 1000)))
        (callback (*metro* (+ time 0.2)) 'metre-test (+ time 0.25))))

(metre-test (*metro* 'get-beat 1.0))

;; ---------------------------------------------------------------

(define *metro* (make-metro 140))

(define *metre1* (make-metre '(2 3 4 3 2) 0.25))
(define *metre2* (make-metre '(3 5 7 5 3) 0.25))

(define metre-test
  (lambda (time degree)
    (play-note (*metro* time) drums
               (random (cons .8 *gm-closed-hi-hat*) (cons .2 *gm-open-hi-hat*))
               (+ 40 (* 20 (cos (* 2 3.141592 time))))
               (random (cons .8 500) (cons .2 2000))
               9)
    (play-note (*metro* time) synth
               (pc:random 90 107 (pc:diatonic 9 '- degree))
               (+ 50 (* 25 (cos (* .120 3.141592 time))))
               80)
    (if (*metre1* time 1.0)
        (begin (play-note (*metro* time) drums *gm-snare* 80 100000)
               (play-note (*metro* time) drums *gm-pedal-hi-hat* 80 100000)
               (play-note (*metro* time) organ
                          (+ 60 (car (pc:diatonic 9 '- degree)))
                          100
                          10000)))
    (if (*metre2* time 1.0)
        (begin (play-note (*metro* time) drums *gm-kick* 80 100000)
               (play-note (*metro* time) drums *gm-ride-bell* 70 100000)
               (for-each (lambda (p)
                           (play-note (*metro* time) synth p 70 10000))
                         (pc:make-chord 65 80 3 (pc:diatonic 9 '- degree)))))
    (callback (*metro* (+ time 0.2)) 'metre-test (+ time 0.25)
              (if (= 0.0 (modulo time 8.0))
                  (random (cdr (assoc degree '((i vii vii vi)
                                               (n v)
                                               (vi n)
                                               (v vi i)
                                               (vii i)))))
                  degree))))

(metre-test (*metro* 'get-beat 1.0) 'i)




